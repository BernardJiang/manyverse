/* Copyright (C) 2018-2019 The Manyverse Authors.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

import xs, {Stream} from 'xstream';
import sample from 'xstream-sample';
import {SSBSource, RestoreIdentityResponse} from '../../drivers/ssb';
import {DialogSource} from '../../drivers/dialogs';
import {State} from './model';

type Actions = {
  confirm$: Stream<any>;
};

function renderContent(response: RestoreIdentityResponse): string {
  const CORRECT =
    "Your account's identity is now restored.\n\nNow, to restore " +
    'your data, connect with friends that have interacted with ' +
    'you before, to redownload your data from them.';

  const TRY_AGAIN =
    'Try again by inserting your recovery phrase ' +
    'consisting of 48 words separated by whitespace.';

  const OVERWRITE_RISK =
    'There is already an account in the app, we cannot overwrite it.' +
    'If you are sure you want to override, uninstall and re-install ' +
    'Manyverse to recover your account from a clean state.';

  const TOO_SHORT =
    'There are some words missing. Your recovery phrase should be ' +
    '48 words long.\n\n' +
    TRY_AGAIN;

  const TOO_LONG =
    'There are too many words. Your recovery phrase should be exactly ' +
    '48 words long.\n\n' +
    TRY_AGAIN;

  const WRONG_LENGTH =
    'Your recovery phrase should be exactly ' +
    '48 words long.\n\n' +
    TRY_AGAIN;

  const INCORRECT =
    'The recovery phrase you gave does not look like a valid ' +
    'identity generated by Manyverse.\n\n' +
    TRY_AGAIN;

  return response === 'IDENTITY_READY'
    ? CORRECT
    : response === 'INCORRECT'
    ? INCORRECT
    : response === 'OVERWRITE_RISK'
    ? OVERWRITE_RISK
    : response === 'WRONG_LENGTH'
    ? WRONG_LENGTH
    : response === 'TOO_LONG'
    ? TOO_LONG
    : response === 'TOO_SHORT'
    ? TOO_SHORT
    : INCORRECT;
}

export default function dialog(
  actions: Actions,
  state$: Stream<State>,
  ssbSource: SSBSource,
  dialogSource: DialogSource,
) {
  const practiceModeConfirmation$ = actions.confirm$
    .compose(sample(state$))
    .filter(state => state.practiceMode === true)
    .map(
      state =>
        state.backendWords ===
        state.inputWords
          .split(' ')
          .map(s => s.trim().toLowerCase())
          .join(' '),
    )
    .map(passed =>
      dialogSource
        .alert(
          passed ? 'Correct!' : 'Incorrect',
          passed
            ? "Your account's identity is now secure because you know the " +
                'recovery phrase.'
            : 'Try again: write down your recovery phrase consisting of 48 ' +
                'words separated by whitespace.',
        )
        .mapTo(passed),
    )
    .flatten();

  const realRecoveryConfirmation$ = actions.confirm$
    .compose(sample(state$))
    .filter(state => state.practiceMode === false)
    .map(state => ssbSource.restoreIdentity$(state.inputWords))
    .flatten()
    .map(response => {
      const passed = response === 'IDENTITY_READY';
      return dialogSource
        .alert(passed ? 'Welcome back!' : 'Incorrect', renderContent(response))
        .mapTo(passed);
    })
    .flatten();

  return xs.merge(practiceModeConfirmation$, realRecoveryConfirmation$);
}
